"""
User profile management router
"""
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import Optional

from ..database import get_db
from ..models import User
from ..schemas import APIResponse
from ..security import (
    get_current_user, verify_password, get_password_hash, 
    is_password_strong, is_email_valid
)
from pydantic import BaseModel, Field

router = APIRouter(prefix="/profile", tags=["user profile"])

# Schemas for profile operations
class ChangePasswordRequest(BaseModel):
    current_password: str = Field(..., min_length=1)
    new_password: str = Field(..., min_length=8)
    confirm_password: str = Field(..., min_length=8)

class ChangeUsernameRequest(BaseModel):
    new_username: str = Field(..., min_length=3, max_length=50)
    current_password: str = Field(..., min_length=1)

class ChangeEmailRequest(BaseModel):
    new_email: str = Field(..., min_length=5, max_length=255)
    current_password: str = Field(..., min_length=1)

class DeleteAccountRequest(BaseModel):
    current_password: str = Field(..., min_length=1)
    confirmation: str = Field(..., pattern="^DELETE_MY_ACCOUNT$")

@router.put("/change-password", response_model=APIResponse)
async def change_password(
    request: ChangePasswordRequest,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Zmie≈Ñ has≈Ço u≈ºytkownika (wymaga obecnego has≈Ça)"""
    
    # Sprawd≈∫ czy nowe has≈Ça siƒô zgadzajƒÖ
    if request.new_password != request.confirm_password:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Nowe has≈Ça nie sƒÖ identyczne"
        )
    
    # Sprawd≈∫ obecne has≈Ço
    if not verify_password(request.current_password, current_user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Nieprawid≈Çowe obecne has≈Ço"
        )
    
    # Sprawd≈∫ czy nowe has≈Ço nie jest takie same jak obecne
    if verify_password(request.new_password, current_user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Nowe has≈Ço musi byƒá r√≥≈ºne od obecnego"
        )
    
    # Sprawd≈∫ si≈Çƒô nowego has≈Ça
    is_strong, message = is_password_strong(request.new_password)
    if not is_strong:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Has≈Ço jest za s≈Çabe: {message}"
        )
    
    # Zaktualizuj has≈Ço
    current_user.hashed_password = get_password_hash(request.new_password)
    current_user.failed_login_attempts = 0  # Resetuj nieudane pr√≥by
    current_user.account_locked_until = None  # Odblokuj konto je≈õli by≈Ço zablokowane
    
    db.commit()
    
    return APIResponse(
        success=True,
        message="Has≈Ço zosta≈Ço pomy≈õlnie zmienione"
    )

@router.put("/change-username", response_model=APIResponse)
async def change_username(
    request: ChangeUsernameRequest,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Zmie≈Ñ username/nick u≈ºytkownika (wymaga has≈Ça + weryfikacja unikalno≈õci)"""
    
    # Sprawd≈∫ obecne has≈Ço
    if not verify_password(request.current_password, current_user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Nieprawid≈Çowe has≈Ço"
        )
    
    # Sprawd≈∫ czy nowy username nie jest taki sam jak obecny
    if request.new_username.lower() == current_user.username.lower():
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Nowy username musi byƒá r√≥≈ºny od obecnego"
        )
    
    # üîç WERYFIKACJA UNIKALNO≈öCI USERNAME
    existing_user = db.query(User).filter(
        User.username.ilike(request.new_username),  # Case-insensitive check
        User.id != current_user.id  # Exclude current user
    ).first()
    
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Ten username jest ju≈º zajƒôty"
        )
    
    # Sprawd≈∫ format username (tylko litery, cyfry, podkre≈õlniki, my≈õlniki)
    import re
    if not re.match(r'^[a-zA-Z0-9_-]+$', request.new_username):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Username mo≈ºe zawieraƒá tylko litery, cyfry, podkre≈õlniki i my≈õlniki"
        )
    
    # Zaktualizuj username
    old_username = current_user.username
    current_user.username = request.new_username
    
    db.commit()
    
    return APIResponse(
        success=True,
        message=f"Username zosta≈Ç zmieniony z '{old_username}' na '{request.new_username}'"
    )

@router.put("/change-email", response_model=APIResponse)
async def change_email(
    request: ChangeEmailRequest,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Zmie≈Ñ email u≈ºytkownika (wymaga has≈Ça + weryfikacja unikalno≈õci)"""
    
    # Sprawd≈∫ obecne has≈Ço
    if not verify_password(request.current_password, current_user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Nieprawid≈Çowe has≈Ço"
        )
    
    # Sprawd≈∫ format email
    if not is_email_valid(request.new_email):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Nieprawid≈Çowy format email"
        )
    
    # Sprawd≈∫ czy nowy email nie jest taki sam jak obecny
    if request.new_email.lower() == current_user.email.lower():
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Nowy email musi byƒá r√≥≈ºny od obecnego"
        )
    
    # üîç WERYFIKACJA UNIKALNO≈öCI EMAIL
    existing_user = db.query(User).filter(
        User.email.ilike(request.new_email),  # Case-insensitive check
        User.id != current_user.id  # Exclude current user
    ).first()
    
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Ten email jest ju≈º u≈ºywany przez inne konto"
        )
    
    # Zaktualizuj email i ustaw jako niezweryfikowany
    old_email = current_user.email
    current_user.email = request.new_email
    current_user.email_verified = False  # Wymag ponownej weryfikacji
    current_user.verification_token = None
    current_user.verification_expires_at = None
    
    db.commit()
    
    return APIResponse(
        success=True,
        message=f"Email zosta≈Ç zmieniony z '{old_email}' na '{request.new_email}'. Wymagana jest ponowna weryfikacja.",
        data={"requires_verification": True}
    )

@router.delete("/delete-account", response_model=APIResponse)
async def delete_account(
    request: DeleteAccountRequest,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    üö® USU≈É KONTO U≈ªYTKOWNIKA (nieodwracalne!)
    Wymaga has≈Ça + potwierdzenia "DELETE_MY_ACCOUNT"
    """
    
    # Sprawd≈∫ obecne has≈Ço
    if not verify_password(request.current_password, current_user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Nieprawid≈Çowe has≈Ço"
        )
    
    # Sprawd≈∫ potwierdzenie
    if request.confirmation != "DELETE_MY_ACCOUNT":
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Nieprawid≈Çowe potwierdzenie. Wpisz dok≈Çadnie: DELETE_MY_ACCOUNT"
        )
    
    # Dodatkowa ochrona - nie pozw√≥l usunƒÖƒá konta administratora
    if current_user.is_admin or (current_user.role and current_user.role.name == "admin"):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Nie mo≈ºna usunƒÖƒá konta administratora. Skontaktuj siƒô z innym administratorem."
        )
    
    # Zapisz informacje przed usuniƒôciem (dla log√≥w)
    deleted_username = current_user.username
    deleted_email = current_user.email
    deleted_id = current_user.id
    
    try:
        # üóëÔ∏è USUNIƒòCIE KONTA
        # Dziƒôki ON DELETE CASCADE w bazie, powiƒÖzane dane zostanƒÖ automatycznie usuniƒôte:
        # - komentarze (comments)
        # - polubienia komentarzy (comment_likes)  
        # - klucze API (api_keys)
        # - tokeny resetowania has≈Ça
        
        db.delete(current_user)
        db.commit()
        
        # Log usuniƒôcia konta (opcjonalnie mo≈ºna zapisaƒá do tabeli audytu)
        print(f"üóëÔ∏è KONTO USUNIƒòTE: ID={deleted_id}, username={deleted_username}, email={deleted_email}")
        
        return APIResponse(
            success=True,
            message=f"Konto '{deleted_username}' zosta≈Ço permanentnie usuniƒôte. Dziƒôkujemy za korzystanie z naszej platformy."
        )
        
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="WystƒÖpi≈Ç b≈ÇƒÖd podczas usuwania konta. Spr√≥buj ponownie lub skontaktuj siƒô z pomocƒÖ technicznƒÖ."
        )

@router.get("/", response_model=dict)
async def get_profile_info(
    current_user: User = Depends(get_current_user)
):
    """Pobierz podstawowe informacje o profilu u≈ºytkownika"""
    
    return {
        "id": current_user.id,
        "username": current_user.username,
        "email": current_user.email,
        "full_name": current_user.full_name,
        "is_verified": current_user.email_verified,
        "is_admin": current_user.is_admin,
        "created_at": current_user.created_at,
        "last_login": current_user.last_login,
        "total_comments": current_user.total_comments,
        "total_likes_received": current_user.total_likes_received,
        "role": {
            "id": current_user.role.id if current_user.role else None,
            "name": current_user.role.name if current_user.role else None,
            "display_name": current_user.role.display_name if current_user.role else None,
            "color": current_user.role.color if current_user.role else None,
        } if current_user.role else None,
        "rank": {
            "id": current_user.rank.id if current_user.rank else None,
            "name": current_user.rank.name if current_user.rank else None,
            "display_name": current_user.rank.display_name if current_user.rank else None,
            "color": current_user.rank.color if current_user.rank else None,
            "icon": current_user.rank.icon if current_user.rank else None,
            "level": current_user.rank.level if current_user.rank else None,
        } if current_user.rank else None,
        "account_status": {
            "is_locked": current_user.account_locked_until is not None,
            "locked_until": current_user.account_locked_until,
            "failed_attempts": current_user.failed_login_attempts
        }
    }
