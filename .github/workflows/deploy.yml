name: Deploy Portfolio Backend to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Add EC2 to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts || echo "ssh-keyscan failed, continuing..."

    - name: Deploy to EC2
      run: |
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          # Navigate to home directory and portfolio app
          cd ~
          
          # Clone or pull latest code
          if [ ! -d "Portfolio-Backend" ]; then
            echo "Cloning repository..."
            git clone https://github.com/KGR33N-dev/Portfolio-Backend.git
          else
            echo "Pulling latest changes..."
            cd Portfolio-Backend
            git pull origin main
            cd ~
          fi
          
          # Navigate to backend directory
          cd Portfolio-Backend/backend
          
          # Set environment variables for production
          export DATABASE_URL="${{ secrets.DATABASE_URL }}"
          export SECRET_KEY="${{ secrets.SECRET_KEY }}"
          export FRONTEND_URL="https://kgr33n.com"
          export PRODUCTION_FRONTEND="https://kgr33n.com"
          export ENVIRONMENT="production"
          export DEBUG="False"
          
          # Create .env.production file
          cat > .env.production << EOL
DATABASE_URL=${{ secrets.DATABASE_URL }}
SECRET_KEY=${{ secrets.SECRET_KEY }}
FRONTEND_URL=https://kgr33n.com
PRODUCTION_FRONTEND=https://kgr33n.com
ENVIRONMENT=production
DEBUG=False
EOL
          
          # Stop existing containers
          echo "Stopping existing containers..."
          docker compose -f docker-compose.prod.yml down || true
          
          # Build and start new containers
          echo "Building and starting containers..."
          docker compose -f docker-compose.prod.yml up -d --build
          
          # Wait for container to start
          echo "Waiting for container to start..."
          sleep 15
          
          # Check container status
          docker compose -f docker-compose.prod.yml ps
          
          # Show logs for debugging
          echo "=== Container logs ==="
          docker compose -f docker-compose.prod.yml logs --tail=20
          
          # Clean up old images
          docker image prune -f || true
          
          echo "✅ Deployment completed!"
        EOF

    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        sleep 30
        
        # Test health endpoint
        if curl -f --max-time 10 http://${{ secrets.EC2_HOST }}:8000/api/health; then
          echo "✅ Health check passed!"
        else
          echo "❌ Health check failed!"
          exit 1
        fi
        
        # Test blog API
        if curl -f --max-time 10 http://${{ secrets.EC2_HOST }}:8000/api/blog/; then
          echo "✅ Blog API accessible!"
        else
          echo "⚠️ Blog API test failed, but continuing..."
        fi

    - name: Notify on success
      if: success()
      run: |
        echo "🚀 Deployment successful!"
        echo "🌐 API available at: http://${{ secrets.EC2_HOST }}:8000"
        echo "🔍 Health check: http://${{ secrets.EC2_HOST }}:8000/api/health"
        echo "📝 Blog API: http://${{ secrets.EC2_HOST }}:8000/api/blog/"

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        echo "Check the logs above for details."
