name: Deploy Portfolio Backend to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy locally
      run: |
        # Navigate to backend directory
        cd backend
        
        # Set environment variables for production
        export DATABASE_URL="${{ secrets.DATABASE_URL }}"
        export SECRET_KEY="${{ secrets.SECRET_KEY }}"
        export FRONTEND_URL="https://kgr33n.com"
        export PRODUCTION_FRONTEND="https://kgr33n.com"
        export ENVIRONMENT="production"
        export DEBUG="False"
        
        # Create .env.production file
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env.production
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env.production
        echo "FRONTEND_URL=https://kgr33n.com" >> .env.production
        echo "PRODUCTION_FRONTEND=https://kgr33n.com" >> .env.production
        echo "ENVIRONMENT=production" >> .env.production
        echo "DEBUG=False" >> .env.production
        
        # Stop existing containers
        echo "Stopping existing containers..."
        docker compose -f docker-compose.prod.yml down || true
        
        # Build and start new containers
        echo "Building and starting containers..."
        docker compose -f docker-compose.prod.yml up -d --build
        
        # Wait for container to start
        echo "Waiting for container to start..."
        sleep 15
        
        # Check container status
        docker compose -f docker-compose.prod.yml ps
        
        # Show logs for debugging
        echo "=== Container logs ==="
        docker compose -f docker-compose.prod.yml logs --tail=20
        
        # Clean up old images
        docker image prune -f || true
        
        echo "✅ Deployment completed!"

    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        sleep 30
        
        # Test health endpoint
        if curl -f --max-time 10 http://localhost:8000/api/health; then
          echo "✅ Health check passed!"
        else
          echo "❌ Health check failed!"
          exit 1
        fi
        
        # Test blog API
        if curl -f --max-time 10 http://localhost:8000/api/blog/; then
          echo "✅ Blog API accessible!"
        else
          echo "⚠️ Blog API test failed, but continuing..."
        fi

    - name: Notify on success
      if: success()
      run: |
        echo "🚀 Deployment successful!"
        echo "🌐 API available at: http://51.20.78.79:8000"
        echo "🔍 Health check: http://51.20.78.79:8000/api/health"
        echo "📝 Blog API: http://51.20.78.79:8000/api/blog/"

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        echo "Check the logs above for details."
